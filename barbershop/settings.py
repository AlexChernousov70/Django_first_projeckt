"""
Django settings for barbershop project.

Generated by 'django-admin startproject' using Django 5.1.7.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.1/ref/settings/
"""

from pathlib import Path
import os
from dotenv import load_dotenv

load_dotenv()

SECRET_KEY = os.getenv('SECRET_KEY')

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.1/howto/deployment/checklist/

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django_extensions',
    'debug_toolbar',
    'core',
    'users',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'debug_toolbar.middleware.DebugToolbarMiddleware',
]

ROOT_URLCONF = 'barbershop.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR / 'templates'],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [ # Здесь хранятся все контекстные процессоры
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth', # с помощью этого процессора мы можем получить доступ к объекту пользователя
                'django.contrib.messages.context_processors.messages',
                'core.context_processors.menu_context',  # Добавили наш контекстный процессор
            ],
        },
    },
]

WSGI_APPLICATION = 'barbershop.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.1/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}


# Password validation
# https://docs.djangoproject.com/en/5.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.1/topics/i18n/

LANGUAGE_CODE = 'ru-ru'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.1/howto/static-files/

# Указываем путь к статическим файлам в проекте. Это адрес на сервере, по которому будут доступны статические файлы
STATIC_URL = '/static/'

# Указали путь к папке, где будут храниться статические файлы
STATICFILES_DIRS = [
    BASE_DIR / "core/static", # Статика приложения core
    BASE_DIR / "static", # Глобальная статика
]

# Default primary key field type
# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# Указали путь к папке, где будут храниться медиа-файлы, это необходимо для работы с изображениями
MEDIA_URL = '/media/'
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')

# Настройка для отладки в локальной сети
INTERNAL_IPS = [
    '127.0.0.1',
]

TELEGRAM_BOT_API_KEY = os.getenv('TELEGRAM_BOT_API_KEY')
TELEGRAM_USER_ID = os.getenv('TELEGRAM_USER_ID')

LOGIN_URL = '/users/login/' # перенаправление на страницу входа при попытке доступа к защищенной странице без авторизации
LOGIN_REDIRECT_URL = 'landing'  # перенаправление на страницу после успешной авторизации
LOGOUT_REDIRECT_URL = 'landing' # перенаправление на страницу после выхода из аккаунта

AUTHENTICATION_BACKENDS = [
    'users.backends.EmailOrUsernameModelBackend',
    'django.contrib.auth.backends.ModelBackend',  # стандартный бэкенд на случай чего
]

# AUTH_USER_MODEL = "users.User"

EMAIL_BACKEND = 'django.core.mail.backends.console.EmailBackend' # эта настройка указывает Django, куда отправлять письма. В данном случае — выводить их в консоль (терминал), а не отправлять реально. EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend' # альтернативная отправка 
EMAIL_HOST = 'smtp.mail.ru' # Указывает адрес SMTP-сервера для отправки писем (например, smtp.gmail.com для Gmail или smtp.mail.ru для Mail.ru) Без этого Django не знает, куда подключаться для отправки почты.
EMAIL_PORT = 587 # Задаёт порт SMTP-сервера. Почему 587? Это стандартный порт для защищённого соединения с TLS. Альтернатива: порт 465 для SSL (устаревший, но иногда используется).
EMAIL_USE_SSL = True # Включает шифрование соединения с SMTP-сервером через протокол TLS. защищает данные (логин, пароль, содержимое письма) от перехвата.

# Логин и пароль от почтового ящика, который Django будет использовать для отправки писем.
EMAIL_HOST_USER = os.getenv('EMAIL_HOST_LOGIN') 
EMAIL_HOST_PASSWORD = os.getenv('EMAIL_HOST_PASSWORD')
DEFAULT_FROM_EMAIL = os.getenv('EMAIL_HOST_LOGIN') # Указывает email-адрес, который будет отображаться как отправитель в письмах.
SERVER_EMAIL = os.getenv('EMAIL_HOST_LOGIN')
EMAIL_ADMIN = os.getenv('EMAIL_HOST_LOGIN')

MESSAGE_STORAGE = 'django.contrib.messages.storage.session.SessionStorage'